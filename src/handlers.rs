use actix_web::{get, web, HttpResponse, Responder};
use crate::models::Route;
use crate::state::AppState;

pub async fn get_routes(state: web::Data<AppState>) -> HttpResponse {
    let routes = state.routes.lock().unwrap(); // –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    HttpResponse::Ok().json(&*routes) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
}

pub async fn create_route(
    state: web::Data<AppState>,
    route: web::Json<Route>, // –ü—Ä–∏–Ω–∏–º–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
) -> HttpResponse {
    let mut routes = state.routes.lock().unwrap(); // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    let new_id = routes.len() + 1; // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
    let new_route = Route::new(new_id, route.start.clone(), route.end.clone());
    routes.push(new_route.clone()); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –≤ —Å–ø–∏—Å–æ–∫
    HttpResponse::Created().json(&new_route) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –≤ –æ—Ç–≤–µ—Ç
}


#[get("/")]
async fn index() -> impl Responder {
    "–ü—Ä–∏–≤–µ—Ç, –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫! üöÄ"
}